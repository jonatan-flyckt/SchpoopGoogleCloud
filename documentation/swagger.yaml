swagger: "2.0"
info:
  title: "Schpoop"
  description: "Platform for memes."
  version: "1.0.0"
host: "TBA"

tags:
  - name: "users"
    description: "Registered users"
  - name: "sessions"
    description: "Sessions for logged in users"
  - name: "memes"
    description: "Created meme posts"
  - name: "memetemplates"
    description: "Meme image templates"
  - name: "comments"
    description: "Comments on meme posts"

paths:
  # ============== USERS ==============
  /users:
    post:
      tags:
        - "users"
      summary: "Register a new user"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User to be registered"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "User successfully registered"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    get:
      tags:
        - "users"
      summary: "Get a list of usernames"
      produces:
        - "application/json"
      parameters:
        - name: "name"
          in: "query"
          description: "search query for usernames"
          required: false
          type: "string"
      responses:
        200:
          description: "Users successfully fetched"
          schema:
            type: "array"
            items:
              type: "string"
        500:
          description: "Internal Server Error"
  /users/{username}:
    put:
      tags:
        - "users"
      summary: "Edits a user"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "JWT Bearer Access Token"
          required: true
          type: "string"
        - name: "username"
          in: "path"
          description: "username of the user to edit"
          required: true
          type: "string"
        - in: "body"
          name: "password"
          description: "new password to update"
          required: true
          schema:
            type: "object"
            properties:
              password:
                type: "string"
      responses:
        204:
          description: "User successfully edited"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"
    delete:
      tags:
        - "users"
      summary: "Removes a user"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "JWT Bearer Access Token"
          required: true
          type: "string"
        - name: "username"
          in: "path"
          description: "username of the user to delete"
          required: true
          type: "string"
      responses:
        204:
          description: "User successfully removed"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"

  # ============== SESSIONS ==============
  /sessions:
    post:
      tags:
        - "sessions"
      summary: "Logs in a user"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User to be logged in"
          required: true
          schema:
            $ref: "#/definitions/UserLogin"
      responses:
        200:
          description: "User successfully logged in"
          schema:
            type: "object"
            properties:
              accessToken:
                type: "string"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
  # ============== MEMES ==============
  /memes:
    post:
      tags:
        - "memes"
      summary: "Post a new meme"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "JWT Bearer Access Token"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Meme to be posted"
          required: true
          schema:
            $ref: "#/definitions/NewMeme"
      responses:
        200:
          description: "Meme successfully posted"
          schema:
            $ref: "#/definitions/Meme"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    get:
      tags:
        - "memes"
      summary: "Get a list of memes"
      parameters:
        - name: "name"
          in: "query"
          description: "search query for names"
          required: false
          type: "string"
        - name: "templateId"
          in: "query"
          description: "ID of template to get memes by"
          required: false
          type: "string"
        - name: "username"
          in: "query"
          description: "name of user to get memes by"
          required: false
          type: "string"
      responses:
        200:
          description: "Memes successfully fetched"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Meme"
        500:
          description: "Internal Server Error"
  /memes/{memeId}:
    get:
      tags:
        - "memes"
      summary: "Get a meme"
      parameters:
        - name: "memeId"
          in: "path"
          description: "id of the meme to get"
          required: true
          type: "integer"
      responses:
        200:
          description: "Meme successfully fetched"
          schema:
            $ref: "#/definitions/Meme"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"
    delete:
      tags:
        - "memes"
      summary: "Delete a meme"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "JWT Bearer Access Token"
          required: true
          type: "string"
        - name: "memeId"
          in: "path"
          description: "id of the meme to delete"
          required: true
          type: "integer"
      responses:
        204:
          description: "Meme successfully removed"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"

  # ============== TEMPLATES ==============
  /memetemplates:
    post:
      tags:
        - "memetemplates"
      summary: "Create a new meme template"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "JWT Bearer Access Token"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Template to be created"
          required: true
          schema:
            $ref: "#/definitions/NewMemeTemplate"
      responses:
        200:
          description: "Template successfully posted"
          schema:
            $ref: "#/definitions/MemeTemplate"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    get:
      tags:
        - "memetemplates"
      summary: "Get a list of meme templates"
      parameters:
        - name: "username"
          in: "query"
          description: "name of user to get templates by"
          required: false
          type: "string"
        - name: "name"
          in: "query"
          description: "search query for names"
          required: false
          type: "string"
      responses:
        200:
          description: "Templates successfully fetched"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MemeTemplate"
        500:
          description: "Internal Server Error"
  /memetemplates/{templateId}:
    get:
      tags:
        - "memetemplates"
      summary: "Get a template"
      parameters:
        - name: "templateId"
          in: "path"
          description: "id of the template to get"
          required: true
          type: "integer"
      responses:
        200:
          description: "Template successfully fetched"
          schema:
            $ref: "#/definitions/MemeTemplate"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"
    delete:
      tags:
        - "memetemplates"
      summary: "Delete a template"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "JWT Bearer Access Token"
          required: true
          type: "string"
        - name: "templateId"
          in: "path"
          description: "id of the template to delete"
          required: true
          type: "integer"
      responses:
        204:
          description: "Template successfully removed"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"

  # ============== COMMENTS ==============

  /comments:
    post:
      tags:
        - "comments"
      summary: "Comment on a meme"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "JWT Bearer Access Token"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Comment to be added"
          required: true
          schema:
            $ref: "#/definitions/NewComment"
      responses:
        200:
          description: "Comment successfully posted"
          schema:
            $ref: "#/definitions/Comment"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
  /comments/{memeId}:
    get:
      tags:
        - "comments"
      summary: "Get all comments on a meme"
      parameters:
        - name: "memeId"
          in: "path"
          description: "Id of meme to get comments on"
          required: true
          type: "string"
      responses:
        200:
          description: "Comments successfully fetched"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comment"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
  /comments/{commentId}:
    put:
      tags:
        - "comments"
      summary: "Edit a comment"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "JWT Bearer Access Token"
          required: true
          type: "string"
        - name: "commentId"
          in: "path"
          description: "Comment to be edited"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Edited text"
          required: true
          schema:
            type: "object"
            properties:
              text:
                type: "string"
      responses:
        200:
          description: "Comment successfully edited"
          schema:
            $ref: "#/definitions/Comment"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"
    delete:
      tags:
        - "comments"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "JWT Bearer Access Token"
          required: true
          type: "string"
        - name: "commentId"
          in: "path"
          description: "Comment to be deleted"
          required: true
          type: "integer"
      summary: "Delete a comment"
      responses:
        204:
          description: "Comment successfully removed"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"

  # ============== VOTES ==============
  /votes/{memeId}:
    post:
      tags:
        - "votes"
      summary: "Vote on a meme"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "JWT Bearer Access Token"
          required: true
          type: "string"
        - name: "memeId"
          in: "path"
          description: "ID of the meme"
          required: true
          type: "string"
        - name: "body"
          in: "body"
          description: "username of the signed in user and vote to add"
          required: true
          schema:
            $ref: "#/definitions/NewVote"
      responses:
        200:
          description: "Vote successfully posted"
          schema:
            $ref: "#/definitions/Vote"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    get:
      tags:
        - "votes"
      summary: "Get a user's vote on a meme"
      parameters:
        - name: "memeId"
          in: "path"
          description: "ID of the meme"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          description: "name of the user"
          required: true
          schema:
            type: "object"
            properties:
              username:
                type: "string"
      responses:
        200:
          description: "Vote successfully fetched"
          schema:
            $ref: "#/definitions/Vote"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"
    delete:
      tags:
        - "votes"
      summary: "Undo a vote on a meme"
      parameters:
        - in: "header"
          name: "Authorization"
          description: "JWT Bearer Access Token"
          required: true
          type: "string"
        - name: "memeId"
          in: "path"
          description: "ID of the meme"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          description: "name of the user"
          required: true
          schema:
            type: "object"
            properties:
              username:
                type: "string"
      responses:
        204:
          description: "Vote successfully removed"
        400:
          description: "Bad Request, see error message"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"

definitions:
  Error:
    type: "object"
    required:
      - "error"
    properties:
      error:
        type: "string"
  User:
    type: "object"
    required:
      - "username"
      - "password"
    properties:
      username:
        type: "string"
      password:
        type: "string"
  NewMeme:
    type: "object"
    required:
      - "templateId"
      - "username"
      - "imageSource"
      - "isTwitterFormat"
      - "isDeepFried"
    properties:
      templateId:
        type: "integer"
      username:
        type: "string"
      name:
        type: "string"
      imageSource:
        type: "string"
      isTwitterFormat:
        type: "boolean"
      isDeepFried:
        type: "boolean"
      topText:
        type: "string"
      bottomText:
        type: "string"
  Meme:
    type: "object"
    required:
      - "id"
      - "templateId"
      - "username"
      - "imageSource"
      - "votes"
    properties:
      id:
        type: "integer"
      templateId:
        type: "integer"
      username:
        type: "string"
      name:
        type: "string"
      imageSource:
        type: "string"
      votes:
        type: "integer"
      postDate:
        type: "integer"
  NewMemeTemplate:
    type: "object"
    required:
      - "username"
      - "imageSource"
    properties:
      username:
        type: "string"
      name:
        type: "string"
      imageSource:
        type: "string"
  MemeTemplate:
    type: "object"
    required:
      - "id"
      - "username"
      - "imageSource"
    properties:
      id:
        type: "integer"
      username:
        type: "string"
      name:
        type: "string"
      imageSource:
        type: "string"
  NewComment:
    type: "object"
    required:
      - "memeId"
      - "text"
      - "username"
    properties:
      memeId:
        type: "integer"
      parentCommentId:
        type: "string"
      text:
        type: "string"
      username:
        type: "string"
  Comment:
    type: "object"
    required:
      - "id"
      - "memeId"
      - "username"
      - "text"
    properties:
      id:
        type: "integer"
      memeId:
        type: "integer"
      username:
        type: "string"
      parentCommentId:
        type: "string"
      text:
        type: "string"
      postDate:
        type: "integer"
      lastEdited:
        type: "integer"
  Vote:
    type: "object"
    required:
      - "memeId"
      - "username"
      - "vote"
    properties:
      memeId:
        type: "integer"
      username:
        type: "string"
      vote:
        type: "integer"
  NewVote:
    type: "object"
    required:
      - "username"
      - "vote"
    properties:
      username:
        type: "string"
      vote:
        type: "integer"
  UserLogin:
    type: "object"
    required:
      - "grant_type"
      - "username"
      - "password"
    properties:
      grant_type:
        type: "string"
      username:
        type: "string"
      password:
        type: "string"
